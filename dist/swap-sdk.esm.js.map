{"version":3,"file":"swap-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 11111,\n  NILE = 201910292,\n  SHASTA = 1\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const INIT_CODE_HASH = '0x278d8201610c32bb650c43e9c27bb9124680c6c6b82d65d58a4117c055f01573'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\n// @TRON only\nexport const FACTORY_ADDRESSES = {\n  [ChainId.NILE]: '0x41da32ec09fb54ab5f5742f1eb730003caac0bbf',\n  [ChainId.MAINNET]: '0x1d0721d247497593a400d01b02ada3be1129730d',\n  [ChainId.SHASTA]: '0xb9fe040dd98a9718805c976f8a899ef17b0f43ed'\n}\n\n// TODO: build that data structure from a simple array of (tokenA, tokenB, pairAddress) to avoid human error when adding pairs...\n\ninterface PairAddresses {\n  [token0Address: string]: { [token1Address: string]: string }\n}\n\n// @TRON\nfunction buildPairAddresses(list: [string, string, string][]): PairAddresses {\n  const res: PairAddresses = {}\n  list.forEach(([tokenA, tokenB, pairAddress]) => {\n    // deterministically sort addresses (prevents duplicates, e.g. (a, b) vs (b ,a))\n    const [token0_, token1_] = tokenA.toLowerCase() < tokenB.toLowerCase() ? [tokenA, tokenB] : [tokenB, tokenA]\n    const token0 = token0_.toLowerCase()\n    const token1 = token1_.toLowerCase()\n    res[token0] = res[token0] || {}\n    if (res[token0][token1]) {\n      throw new Error(`duplicated pair ${tokenA}, ${tokenB}, ${pairAddress}`)\n    }\n    res[token0][token1] = pairAddress\n  })\n  return res\n}\n\n// format: token1, token2, pairAddress\nexport const PAIR_ADDRESSES: { [chainId: string]: PairAddresses } = {\n  [ChainId.NILE]: buildPairAddresses([\n    [\n      // DTKN/WTRX\n      '0x42c142500ff7068f326c01a8f1b3cd8ea7d9377f',\n      '0x8f44113a985076431b77f6078f0929f949cb8836',\n      '0x02a6a10E4C7750a7F8dC159b95936B574c211f0D'\n    ]\n  ]),\n  [ChainId.MAINNET]: buildPairAddresses([\n    [\n      // TRX/USDT\n      '0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18', // WTRX\n      '0xA614F803B6FD780986A42C78EC9C7F77E6DED13C', // USDT\n      '0xE01FF0B9B3862E0FACB4D4BC7320DE6F2C2B354F' // Pair\n    ],\n    [\n      // TRX/ETH\n      '0x53908308F4AA220FB10D778B5D1B34489CD6EDFC', // ETH\n      '0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18', // WTRX\n      '0x06D84F4E79F6927DC2C283092873986DBC9C3C30' // Pair\n    ],\n    [\n      // ETH/USDT\n      '0x53908308F4AA220FB10D778B5D1B34489CD6EDFC', // ETH\n      '0xA614F803B6FD780986A42C78EC9C7F77E6DED13C', // USDT\n      '0x1213E3DA3A5175F7D0D0313113EF12E37C4A98CF' // Pair\n    ],\n    [\n      // ETH/HKMC\n      '0x53908308F4AA220FB10D778B5D1B34489CD6EDFC', // ETH\n      '0x68B0AD0B1FB3811BE676B05047A5A43F8170BAC1', // HKMC\n      '0x7B10898C51F16CEB6D8C52CBDB31E43F0D55A8B7' // Pair\n    ],\n    [\n      // TRX/HKMC\n      '0x68B0AD0B1FB3811BE676B05047A5A43F8170BAC1', // HKMC\n      '0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18', // WTRX\n      '0x56A59AC0FEA1BC021909B0CAEC608C86629BC3B2' // Pair\n    ],\n    [\n      // BTC/USDT\n      '0x84716914C0FDF7110A44030D04D0C4923504D9CC', // BTC\n      '0xA614F803B6FD780986A42C78EC9C7F77E6DED13C', // USDT\n      '0xA034E2AC4E914FA5D0A2EE8107D3C1384B51DB1D' // Pair\n    ],\n    [\n      // BTC/HKMC\n      '0x68B0AD0B1FB3811BE676B05047A5A43F8170BAC1', // HKMC\n      '0x84716914C0FDF7110A44030D04D0C4923504D9CC', // BTC\n      '0x68198BCF82EF0C35E522BEE459D48D6FFF40432F' // Pair\n    ],\n    [\n      // USDT/HKMC\n      '0x68B0AD0B1FB3811BE676B05047A5A43F8170BAC1', // HKMC\n      '0xA614F803B6FD780986A42C78EC9C7F77E6DED13C', // USDT\n      '0xE844013B3EA22B5773D643786A1FCC9849C88961' // Pair\n    ],\n    [\n      // BTC/ETH\n      '0x53908308F4AA220FB10D778B5D1B34489CD6EDFC', // ETH\n      '0x84716914C0FDF7110A44030D04D0C4923504D9CC', // BTC\n      '0x6151451BD833836694C5295C5A7AC88389D2374A' // Pair\n    ],\n    [\n      // TRX/BTC\n      '0x84716914C0FDF7110A44030D04D0C4923504D9CC', // BTC\n      '0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18', // WTRX\n      '0xE77332FF3BCE27E41396F4FA3C4C87D00B8CE958' // Pair\n    ]\n  ]),\n  [ChainId.SHASTA]: buildPairAddresses([\n    [\n      // TRX/USDT\n      '0xA73FB788C5A6EF2BDB5FF621BC06F3CC8FF01A2A', // TRX\n      '0xD7377F28E13C4B255CD532E8182C0EF0F332E33F', // USDT\n      '0x0A5F4F46453AC545250BA305FDEF1D36EF3E8AAB'\n    ],\n    [\n      // TRX/ETH\n      '0xA73FB788C5A6EF2BDB5FF621BC06F3CC8FF01A2A', // TRX\n      '0x4D59F65BA2D66D80F321E66BE5DF152E71AA302F', // ETH\n      '0x385EA972AFF458B32A35A7E9487747DEAF1AF054'\n    ],\n    [\n      // TRX/BTC\n      '0xA73FB788C5A6EF2BDB5FF621BC06F3CC8FF01A2A', // TRX\n      '0x0B511B28D410B729D9D1502445FC1DAFE3B52810', // BTC\n      '0x7FEB8618565CE2085A7C6A03BEDB5BC9A5DFB999'\n    ],\n    [\n      // TRX/HKMC\n      '0xA73FB788C5A6EF2BDB5FF621BC06F3CC8FF01A2A', // TRX\n      '0x50ED1A4BD6335F1FE3570A4C167EF0A765817F67', // HKMC\n      '0x4C6A66126A7B3271DCDC1B07C84AB83EEFD1092B'\n    ],\n    [\n      // HKMC/USDT\n      '0x50ED1A4BD6335F1FE3570A4C167EF0A765817F67', // HKMC\n      '0xD7377F28E13C4B255CD532E8182C0EF0F332E33F', // USDT\n      '0x484809750F039BF7A181C7D9367C46E7914A62D4'\n    ],\n    [\n      // HKMC/ETH\n      '0x50ED1A4BD6335F1FE3570A4C167EF0A765817F67', // HKMC\n      '0x4D59F65BA2D66D80F321E66BE5DF152E71AA302F', // ETH\n      '0x6016298F7AD4426B20485BE35CA289EA01A02AD0'\n    ],\n    [\n      // HKMC/BTC\n      '0x50ED1A4BD6335F1FE3570A4C167EF0A765817F67', // HKMC\n      '0x0B511B28D410B729D9D1502445FC1DAFE3B52810', // BTC\n      '0xF0207A39AB5BB096039B953B9A84AE056A03E9CE'\n    ],\n    [\n      // HKMC/BTC\n      '0x0B511B28D410B729D9D1502445FC1DAFE3B52810', // BTC\n      '0xD7377F28E13C4B255CD532E8182C0EF0F332E33F', // USDT\n      '0x18430F57E0EC53BBB7146572258B46D000328243'\n    ],\n    [\n      // HKMC/BTC\n      '0x0B511B28D410B729D9D1502445FC1DAFE3B52810', // BTC\n      '0x4D59F65BA2D66D80F321E66BE5DF152E71AA302F', // ETH\n      '0x9857C2C3C765140342DA51A7231BE2726A04C96D'\n    ],\n    [\n      // ETH/USDT\n      '0x4D59F65BA2D66D80F321E66BE5DF152E71AA302F', // ETH\n      '0xD7377F28E13C4B255CD532E8182C0EF0F332E33F', // USDT\n      '0x3B7E6AEA4ACF5D7884D847411F23B18C0EA62E39'\n    ]\n  ])\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  // @TRON\n  // public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly ETHER: Currency = new Currency(6, 'TRX', 'Tron')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// TODO: TRON: deploy WTRX and set contract addresses here\nexport const WETH = {\n  // TODO: TRON: deploy WTRX on mainnet\n  [ChainId.MAINNET]: new Token(\n    // Deployed by Tron Foundation\n    // https://tronscan.io/#/token20/TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR/code\n    ChainId.MAINNET,\n    '0x891cdb91d149f23b1a45d9c5ca78a88d0cb44c18',\n    6,\n    'WTRX',\n    'Wrapped TRX'\n  ),\n  [ChainId.NILE]: new Token(ChainId.NILE, '0x8f44113A985076431b77f6078f0929f949cB8836', 6, 'WTRX', 'Wrapped Tron'),\n  // TODO(tron): didnt deploy on shasta yet...\n  [ChainId.SHASTA]: new Token(ChainId.SHASTA, '0xA73FB788C5A6EF2BDB5FF621BC06F3CC8FF01A2A', 6, 'WTRX', 'Wrapped Tron')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport { Contract } from '@ethersproject/contracts'\nimport { BaseProvider } from '@ethersproject/providers'\nimport JSBI from 'jsbi'\n// import { pack, keccak256 } from '@ethersproject/solidity'\n// import { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  // FACTORY_ADDRESS,\n  // INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId,\n  FACTORY_ADDRESSES,\n  PAIR_ADDRESSES\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\n// let PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nfunction getFactoryContract(chainId: ChainId, provider: BaseProvider): Contract {\n  // memoize?\n  const address = FACTORY_ADDRESSES[chainId]\n  // todo: put abi in constants?\n  const abi = [\n    {\n      constant: true,\n      inputs: [\n        {\n          internalType: 'address',\n          name: 'tokenA',\n          type: 'address'\n        },\n        {\n          internalType: 'address',\n          name: 'tokenB',\n          type: 'address'\n        }\n      ],\n      name: 'getPair',\n      outputs: [\n        {\n          internalType: 'address',\n          name: 'pair',\n          type: 'address'\n        }\n      ],\n      payable: false,\n      stateMutability: 'view',\n      type: 'function'\n    }\n  ]\n  const contract = new Contract(address, abi, provider)\n  return contract\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  // @TRON\n  /*\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          // @TODO(tron): this will not work cause our contract does not\n          // use create2\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n  */\n\n  private static warningWasDisplayedOnce: boolean = false\n  private static getAddressWarning(tokenA: Token, tokenB: Token): void {\n    if (this.warningWasDisplayedOnce) return\n    this.warningWasDisplayedOnce = true\n    const message = [\n      `Unknown pair contract address for pair ${tokenA.symbol}/${tokenB.symbol} `,\n      `(${tokenA.address}, ${tokenB.address}). `,\n      'Open an issue at https://github.com/mcswap/swap-sdk/issues ',\n      'with this error message to get the pair added. ',\n      'You can also add the pair to PAIR_ADDRESSES in ',\n      'https://github.com/mcswap/swap-sdk/blob/master/src/constants.ts ',\n      'and send a pull request (if you know how!).'\n    ].join('')\n    if (typeof window === 'undefined') {\n      console.warn(message)\n    } else {\n      alert(message)\n    }\n  }\n\n  // @TRON\n  // create2 opcode not available :(\n  // For now we just hardcode all pair addresses... :/\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    // An alternative solution would be to make `getAddress` async (see getAddressAsync for an attempt) but it would require a relatively\n    // large refactor of both swap-interface and swap-sdk...\n    // console.warn('getAddress() is mocked with hardcoded swapv2 pair addresses until TVM implements create2 op code...')\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const pairAddresses = PAIR_ADDRESSES[tokens[0].chainId]\n    const pairAddress: string | undefined =\n      pairAddresses?.[tokens[0].address.toLowerCase()]?.[tokens[1].address.toLowerCase()]\n    if (pairAddress === undefined) {\n      this.getAddressWarning(tokens[0], tokens[1])\n      // return a dummy address to avoid breaking swap-interface\n      return '0xdEADBEeF00000000000000000000000000000000'\n    }\n    return pairAddress\n  }\n\n  // TODO(tron): implement caching logic\n  public static async getAddressAsync(tokenA: Token, tokenB: Token, provider: BaseProvider): Promise<string> {\n    // TODO: cache pair addresses...\n    const contract = getFactoryContract(tokenA.chainId, provider)\n    const pairAddress = await contract.getPair(tokenA.address, tokenB.address)\n    return pairAddress\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'WMC-V2',\n      'MCSwap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactTRXForTokensSupportingFeeOnTransferTokens' : 'swapExactTRXForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTRXSupportingFeeOnTransferTokens' : 'swapExactTokensForTRX'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapTRXForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactTRX'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@mcswap/mcswap-v2-core/build/contracts/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    // @TRON\n    // '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    // TODO(tron): use java-tron-provider...\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","FACTORY_ADDRESSES","NILE","MAINNET","SHASTA","buildPairAddresses","list","res","forEach","tokenA","tokenB","pairAddress","toLowerCase","token0_","token1_","token0","token1","Error","PAIR_ADDRESSES","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","sortsBefore","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","getFactoryContract","provider","abi","constant","inputs","internalType","type","outputs","payable","stateMutability","contract","Contract","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","getAddressWarning","warningWasDisplayedOnce","message","join","window","console","warn","alert","tokens","pairAddresses","undefined","getAddressAsync","getPair","involvesToken","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","parsedDecimals","getDefaultProvider","getNetwork","ERC20","then","fetchPairData","IUniswapV2Pair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}